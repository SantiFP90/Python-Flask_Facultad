name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  # DISPARADORES PUSH Y PULL PARA EJECUTAR LOS ACTIONS

jobs:
  build:
    runs-on: ubuntu-latest
    #SE EJECUTA CON UBUNTU COMO SO

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        # CLONAR EL REPO
        # Esta acción es un plugin que permite clonar (o "chequear") el código de tu repositorio dentro de la máquina virtual (runner) donde se ejecutará la pipeline.

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"
        # CONFIGURACIÓN DE PYTHON

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r src/requirements.txt

        # ACTUALIZAMOS PIP E INSTALAMOS LAS DEPENDENCIAS

      - name: Run tests
        run: |
          # Ejemplo: pytest tests/

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/testing_2024_quality:${{ github.sha }} .
        #CONSTRUIMOS UNA IMAGEN EN DOCKER

      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
        #LOGUEAMOS EN DOCKER

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/testing_2024_quality:${{ github.sha }}
        #PUSHEAMOS LA IMAGEN
